"""
Django settings for fwpm_backend project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Determine environment (development or production)
ENVIRONMENT = os.environ.get('DJANGO_ENV', 'development')

# Load environment variables from appropriate .env file
from dotenv import load_dotenv

if ENVIRONMENT == 'production':
    ENV_FILE = BASE_DIR / '.env.production'
    if ENV_FILE.exists():
        load_dotenv(ENV_FILE)
        print(f"Loaded PRODUCTION environment from {ENV_FILE}")
    else:
        print(f"Warning: Production environment file not found at {ENV_FILE}", file=sys.stderr)
        # Fallback to regular .env file
        ENV_FILE = BASE_DIR / '.env'
        if ENV_FILE.exists():
            load_dotenv(ENV_FILE)
            print(f"Loaded environment from fallback file {ENV_FILE}")
else:
    # Development environment
    ENV_FILE = BASE_DIR / '.env.development'
    if ENV_FILE.exists():
        load_dotenv(ENV_FILE)
        print(f"Loaded DEVELOPMENT environment from {ENV_FILE}")
    else:
        # Try the .env.django file for backward compatibility
        ENV_FILE = BASE_DIR / '.env.django'
        if ENV_FILE.exists():
            load_dotenv(ENV_FILE)
            print(f"Loaded environment from {ENV_FILE}")
        else:
            # Last resort, try regular .env
            ENV_FILE = BASE_DIR / '.env'
            if ENV_FILE.exists():
                load_dotenv(ENV_FILE)
                print(f"Loaded environment from {ENV_FILE}")
            else:
                print(f"Warning: No .env file found at {ENV_FILE}", file=sys.stderr)

# For backward compatibility, still use decouple for getting config values
from decouple import config, Csv

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-0xT7ISd2uW1r+wvuX92UR+1rn8BeAGh15AxzrxzTHLgRbM')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False if ENVIRONMENT == 'production' else True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=Csv())


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    # Custom apps
    'fwpm_backend.apps.authentication',
    'fwpm_backend.apps.user_management',
    'fwpm_backend.apps.network_performance',
    'fwpm_backend.apps.wntd_tracker',
    'fwpm_backend.apps.implementation_tracker',
    'fwpm_backend.apps.config_tools_manager',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'fwpm_backend.apps.authentication.middleware.SuperAdminMiddleware',
    'fwpm_backend.middleware.json_errors.JSONErrorMiddleware',
]

ROOT_URLCONF = 'fwpm_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fwpm_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Print environment variables for debugging (remove in production)
db_name = config('DB_DATABASE', default='fwpmdb')
db_user = config('DB_USERNAME', default='fwpmuser')
db_password = config('DB_PASSWORD', default='fwpmpassword')
db_host = config('DB_HOST', default='127.0.0.1')
db_port = config('DB_PORT', default='5432')

print(f"DATABASE SETTINGS: {db_name}, {db_user}, {db_host}:{db_port}, Environment: {ENVIRONMENT}")

# PostgreSQL configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': db_name,
        'USER': db_user,
        'PASSWORD': db_password,
        'HOST': db_host,
        'PORT': db_port,
    }
}

# Alternative configuration using DATABASE_URL
# If DATABASE_URL is set, it takes precedence
DATABASE_URL = config('DATABASE_URL', default=None)
if DATABASE_URL:
    import dj_database_url
    DATABASES['default'] = dj_database_url.parse(DATABASE_URL)
    print(f"Using DATABASE_URL configuration: {DATABASE_URL}")


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # Allow unauthenticated access for testing
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'EXCEPTION_HANDLER': 'fwpm_backend.utils.exception_handler.custom_exception_handler',
}

# CORS settings
CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', default='http://localhost:3000', cast=Csv())
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# CSRF settings
CSRF_COOKIE_NAME = 'csrftoken'
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript to read the cookie
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', default='http://localhost:3000', cast=Csv())

# Security settings
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', default=True if ENVIRONMENT == 'production' else False, cast=bool)
CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default=True if ENVIRONMENT == 'production' else False, cast=bool)

# Logging configuration
LOG_LEVEL = config('LOG_LEVEL', default='INFO' if ENVIRONMENT == 'production' else 'DEBUG').upper()

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': LOG_LEVEL,
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': LOG_LEVEL,
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/django.log'),
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': LOG_LEVEL,
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'fwpm_backend': {
            'handlers': ['console', 'file'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
    },
}
